swagger: '2.0'
info:
  version: '1.0.0'
  title: 'Shopping Cart API'
  description: 'This API allows comercial entities to implement the functionalities of a virtual Shopping Cart.'
# host: github.com
# basePath: /bohledevs/facundo-bohle/tree/topic-Services/Topic3-Services/ShoppingCart1.0
schemes:
 - https
 
 
tags: 
  - name: "cart"
    description: "All about your Shopping Cart"

paths:



  /cart:
    
    # This should actually just send an ID and my Domain Model connect to the
    # stock data afterwards, but since I've yet to learn about DB management
    # I'll just ask the user to send the in-memory object instead.
  
    post:
      tags:
      - "cart"
      summary: "Add new item in the cart"
      description: " After the user calls getAllItems, then proceeds to refer this resource indicating item id and quantity."
      operationId: "addItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "itemId"
          type: "string"
          required: true

        - in: "query"
          name: "quantity"
          description: "quantity of items to buy"
          type: "number"
          required: false # If not specified, will be treated as 1
        
      responses:
        200:
          description: "Successful Request - Item(s) added to Cart"
        405:    
          description: "Failed Request - Invalid Inputs"
          schema:
            type: "string"
            description: "The first parameter input that failed"
            example: "ADM Redeon 720"
        409:
          description: "Item is not available, or at least not in the requested quantity."
          schema:
            type: "string"
            example: "Not available! only 2 copies left"
    get:
      tags:
      - "cart"
      summary: "Retrieve all items"
      description: "Retrieve a list of all the items pending in your cart."
      operationId: "getAllItems"
      produces:
      - "application/json"
      
      responses:
        202:
          description: "Successful Request - Retrieving items in Cart"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
    
    delete:
      tags:
      - "cart"
      summary: "Reset your cart"
      description: "Deletes all items in an existing cart."
      operationId: "deleteAll"
      produces:
      - "application/json"
      
      responses:
        202:
          description: "Successful request - Cart has been reset."
        401:
          description: "Unauthorized to make such call."
        500:
          description: "Error while trying to reset. Try again."

  /cart/{itemId}:
    get:
      tags:
      - "cart"
      summary: "Retrieve an Item"
      description: "Retrieves a Item object with relevant info about a certain item in the cart."
      operationId: "getItem"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "itemId"
        description: "Id of item to return"
        type: "integer"
        format: "int32"
        required: true
      
      responses:
        200:
          description: "Successful request - Item Retrieved"
          schema:
            $ref: "#/definitions/Item"
        404:
          description: "Item not found"
            
    delete:
      tags:
      - "cart"
      summary: "Delete an item"
      description: "Deletes an item from the current cart."
      operationId: "deleteItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      
      - in: "path"
        name: "itemId"
        description: "Id of item to be deleted"
        type: "integer"
        format: "int32"
        required: true
      responses:
        202:
          description: "Successful Request - Item deleted"
        404:
          description: "Error - Item not found"

    put:
      tags:
      - "cart"
      summary: "Update quantity"
  
      description: "Allows you to update the quantity of items that you want. (To update other things refer to the Stock API)"
      operationId: "updateQuantity"
      
      parameters:
      - in: "path"
        name: "itemId"
        description: "ID of item to be updated"
        type: "integer"
        format: "int32"
        required: true
            
          
          
      - in: "query"
        name: "newQuantity"
        type: "number"
        description: "New quantity in unitless integers or kilograms(float)"
        required: true
      
      responses:
        202: 
          description: "Sucessful Request - Item Updated"
        404:
          description: "Error - Item not found"

        405: 
          description: "Wrong input"
          schema:
            type: "string"
            example: "Cannot add that much quantity! Not enough in stock."
          
      
definitions:
  Item: 
    type: "object"
    properties:
      id: 
        type: "integer"
        format: "int32"
        example: 0012
      name:
        type: "string"
        example: "Adidas 270 Sneaker"
      quantity:
        type: "number"  # "1" if it's a unit, "2.3kg" if it's not
        example: 1
      price:
        type: "number"  # in US Dollars
        example: "27"
      discount:
        type: "number"
        format: "double"
        example: 2.7
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /bohledevs/ShoppingCartAPI/1.0.0